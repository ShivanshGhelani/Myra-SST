# filepath: s:\Projects\FastAPI\SeperateFolder\MyraSTT\api\main.py.new
import os
import sys
import logging
from pathlib import Path
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware

# Get the project root directory
ROOT_DIR = Path(__file__).parent.parent
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("myra-stt")

# Print debug info
logger.info(f"Current working directory: {os.getcwd()}")
logger.info(f"ROOT_DIR: {ROOT_DIR}")

# Try to load environment variables safely without causing import errors
try:
    logger.info("Attempting to load .env file")
    # Safe import check
    dotenv_import_successful = False
    try:
        import dotenv
        dotenv_import_successful = True
    except ImportError:
        logger.info(".env loading skipped - python-dotenv not installed")
    
    # Only try to load if import was successful
    if dotenv_import_successful:
        dotenv.load_dotenv()
        logger.info("Environment variables loaded from .env")
except Exception as e:
    logger.warning(f"Error during .env handling: {e}")
    # Continue execution even if .env loading fails

# Import router with proper error handling
logger.info("Importing routes...")
try:
    # First try relative import
    try:
        from .routes import router
        logger.info("Router imported using relative import")
    except ImportError:
        # Try absolute import if relative fails
        from api.routes import router
        logger.info("Router imported using absolute import")
except Exception as e:
    logger.error(f"Failed to import router: {e}")
    # Create an empty router as fallback
    from fastapi import APIRouter
    router = APIRouter()
    logger.warning("Using empty router as fallback")

# Configure for Vercel deployment
app = FastAPI(
    title="MyraSTT API",
    description="Speech to Text API",
    version="1.0.0",
    root_path=os.getenv("ROOT_PATH", ""),
    debug=True
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include the router
app.include_router(router)

# Mount static directories with error handling
static_path = os.path.join(ROOT_DIR, "static")
templates_path = os.path.join(ROOT_DIR, "templates")

# Log the paths for debugging
logger.info(f"Static path: {static_path}")
logger.info(f"Templates path: {templates_path}")

# Check if directories exist and mount them
if os.path.isdir(static_path):
    app.mount("/static", StaticFiles(directory=static_path), name="static")
    logger.info("Static directory mounted successfully")
else:
    logger.warning(f"Static directory not found at: {static_path}")

if os.path.isdir(templates_path):
    app.mount("/templates", StaticFiles(directory=templates_path), name="templates")
    logger.info("Templates directory mounted successfully")
else:
    logger.warning(f"Templates directory not found at: {templates_path}")

@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    try:
        icon_path = os.path.join(static_path, "favicon.ico")
        if os.path.exists(icon_path):
            return FileResponse(icon_path)
        
        # Fallback to SVG
        svg_icon = os.path.join(static_path, "SVG", "bot.svg")
        if os.path.exists(svg_icon):
            return FileResponse(svg_icon)
        
        # If no icons found, return a 404
        return HTMLResponse(status_code=404)
    except Exception as e:
        logger.error(f"Error serving favicon: {e}")
        return HTMLResponse(status_code=500)

@app.get("/", response_class=HTMLResponse)
async def read_root():
    try:
        template_path = os.path.join(templates_path, "sst_core.html")
        logger.info(f"Reading template from: {template_path}")
        
        if not os.path.exists(template_path):
            logger.error(f"Template file not found at {template_path}")
            return HTMLResponse(
                content="<html><body><h1>Template Not Found</h1><p>The HTML template file could not be found.</p></body></html>",
                status_code=404
            )
            
        with open(template_path, "r", encoding="utf-8") as f:
            content = f.read()
            return HTMLResponse(content=content, status_code=200)
    except Exception as e:
        error_message = f"Error reading template: {str(e)}"
        logger.error(error_message)
        return HTMLResponse(
            content=f"<html><body><h1>Error</h1><p>{error_message}</p></body></html>",
            status_code=500
        )

@app.get("/debug")
async def debug_info():
    """Endpoint to debug server environment and paths"""
    try:
        debug_info = {
            "environment": os.environ.get("VERCEL_ENV", "local"),
            "cwd": os.getcwd(),
            "root_dir": str(ROOT_DIR),
            "static_path_exists": os.path.isdir(static_path),
            "templates_path_exists": os.path.isdir(templates_path),
            "python_path": sys.path,
        }
        
        # Only add these if the directories exist (to avoid errors)
        if os.path.isdir(static_path):
            debug_info["static_files"] = os.listdir(static_path)
        if os.path.isdir(templates_path):
            debug_info["template_files"] = os.listdir(templates_path)
            
        return debug_info
    except Exception as e:
        logger.error(f"Error in debug endpoint: {e}")
        return {"error": str(e)}

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    logger.error(f"Unhandled exception: {str(exc)}", exc_info=True)
    return HTMLResponse(
        content=f"<html><body><h1>Server Error</h1><p>An error occurred on the server. Please try again later.</p><p>Error: {str(exc)}</p></body></html>",
        status_code=500
    )

def create_app():
    return app

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("api.main:app", host="0.0.0.0", port=8000, reload=True)
