# filepath: s:\Projects\FastAPI\SeperateFolder\MyraSTT\core\speech_recognition.py
import speech_recognition as sr
from pathlib import Path
from typing import Union, Dict, Any, BinaryIO
import logging
import io
from config.settings import SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, USE_MEMORY_STORAGE
from core.file_handler import FileHandler

# Configure logging
logger = logging.getLogger(__name__)

class SpeechRecognizer:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        # Adjust recognition parameters for better accuracy
        self.recognizer.energy_threshold = 300
        self.recognizer.dynamic_energy_threshold = True
        self.recognizer.pause_threshold = 0.8

    def transcribe_audio(self, file_reference: Union[str, Path]) -> Dict[str, Any]:
        """
        Transcribe an audio file to text in any language with confidence score.
        Works with both file paths and memory-stored files.
        """
        file_obj = None
        is_memory_file = False
        
        try:
            # Get file content (either from disk or memory)
            if isinstance(file_reference, str) and file_reference.startswith('memory_file_'):
                # Memory file
                if file_reference in FileHandler.memory_files:
                    file_obj = io.BytesIO(FileHandler.memory_files[file_reference])
                    is_memory_file = True
                else:
                    raise ValueError(f"Memory file not found: {file_reference}")
            else:
                # Regular file path
                file_obj = str(file_reference)
            
            # Process the audio file
            with sr.AudioFile(file_obj) as source:
                logger.info(f"Processing audio {'from memory' if is_memory_file else f'file: {file_reference}'}")
                try:
                    # Adjust for ambient noise before processing
                    self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
                    audio_data = self.recognizer.record(source)
                except Exception as e:
                    logger.error(f"Error reading audio data: {str(e)}")
                    raise ValueError(f"Failed to process audio: {str(e)}")
                
                # Try multiple recognition services in order of reliability
                services = [
                    (self.try_google_recognition, "Google Speech Recognition"),
                    (self.try_sphinx_recognition, "Sphinx (Offline)"),
                ]
                
                last_error = None
                for recognition_func, service_name in services:
                    try:
                        result = recognition_func(audio_data)
                        if result:
                            logger.info(f"Successful transcription with {service_name}")
                            result["service"] = service_name
                            return result
                    except Exception as e:
                        last_error = e
                        logger.warning(f"Error with {service_name}: {str(e)}")
                        continue
                
                # If we've tried all services and none worked
                if last_error:
                    logger.error(f"All speech recognition services failed. Last error: {str(last_error)}")
                return {
                    "error": "Failed to recognize speech with any available service",
                    "text": "",
                    "confidence": 0,
                    "service": "None"
                }
        except Exception as e:
            logger.error(f"Error in transcribe_audio: {str(e)}")
            return {
                "error": str(e),
                "text": "",
                "confidence": 0,
                "service": "Error"
            }
        finally:
            # Close file object if it's a memory file
            if is_memory_file and hasattr(file_obj, 'close'):
                try:
                    file_obj.close()
                except:
                    pass

    def try_google_recognition(self, audio_data) -> Dict[str, Any]:
        """Try Google's speech recognition service with multiple languages"""
        languages_to_try = [DEFAULT_LANGUAGE] + [lang for lang in SUPPORTED_LANGUAGES if lang != DEFAULT_LANGUAGE]
        
        best_result = None
        best_confidence = -1
        
        for lang in languages_to_try:
            try:
                logger.debug(f"Attempting Google recognition with language {lang}")
                result = self.recognizer.recognize_google(audio_data, language=lang, show_all=True)
                
                if result and "alternative" in result:
                    # Get the most confident result
                    for alternative in result["alternative"]:
                        confidence = alternative.get("confidence", 0)
                        if confidence > best_confidence:
                            best_confidence = confidence
                            best_result = alternative
                            best_result["language"] = lang
                    
                    if best_result:
                        logger.debug(f"Found best result with language {lang}, confidence: {best_confidence}")
                        return {
                            "text": best_result['transcript'],
                            "confidence": best_result.get('confidence', 0.0),
                            "language": lang
                        }
            except sr.UnknownValueError:
                logger.debug(f"Google recognition failed for language {lang}: Speech not understood")
                continue
            except sr.RequestError as e:
                logger.error(f"Google recognition service error: {str(e)}")
                break
        return None

    def try_sphinx_recognition(self, audio_data) -> Dict[str, Any]:
        """Fallback to offline Sphinx recognition"""
        try:
            logger.debug("Attempting Sphinx recognition")
            text = self.recognizer.recognize_sphinx(audio_data)
            return {
                "text": text,
                "confidence": 0.6,  # Default confidence for Sphinx
                "language": "en-US"
            }
        except Exception as e:
            logger.debug(f"Sphinx recognition failed: {str(e)}")
            return None
